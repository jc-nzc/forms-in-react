{"map":"{\"version\":3,\"sources\":[\"/Users/jorgecano/Documents/github/repository/forms-in-react/src/App.js\",\"/Users/jorgecano/Documents/github/repository/forms-in-react/src/serviceWorker.js\",\"/Users/jorgecano/Documents/github/repository/forms-in-react/src/index.js\"],\"names\":[\"ValidationMessage\",\"props\",\"valid\",\"react_default\",\"a\",\"createElement\",\"className\",\"message\",\"App\",\"state\",\"username\",\"usernameValid\",\"email\",\"emailValid\",\"password\",\"passwordValid\",\"passwordConfirm\",\"passwordConfirmValid\",\"formValid\",\"errorMsg\",\"validateForm\",\"_this$state\",\"_this\",\"setState\",\"updateUsername\",\"validateUsername\",\"Object\",\"objectSpread\",\"length\",\"updateEmail\",\"validateEmail\",\"test\",\"updatePassword\",\"validatePassword\",\"updatePasswordConfirm\",\"validatePasswordConfirm\",\"_this$state2\",\"_this2\",\"this\",\"role\",\"action\",\"id\",\"htmlFor\",\"type\",\"name\",\"value\",\"onChange\",\"e\",\"target\",\"disabled\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport './App.css';\\n\\nfunction ValidationMessage(props) {\\n  if (!props.valid) {\\n    return(\\n      <div className='error-msg'>{props.message}</div>\\n    )\\n  }\\n  return null;\\n}\\n\\nclass App extends React.Component {\\n  state = {\\n    username: '', usernameValid: false,\\n    email: '', emailValid: false,\\n    password: '', passwordValid: false,\\n    passwordConfirm: '', passwordConfirmValid: false,\\n    formValid: false,\\n    errorMsg: {}\\n  }\\n\\n  validateForm = () => {\\n    const {usernameValid, emailValid, passwordValid, passwordConfirmValid} = this.state;\\n    this.setState({\\n      formValid: usernameValid && emailValid && passwordValid && passwordConfirmValid\\n    })\\n  }\\n\\n  updateUsername = (username) => {\\n    this.setState({username}, this.validateUsername)\\n  }\\n\\n  validateUsername = () => {\\n    const {username} = this.state;\\n    let usernameValid = true;\\n    let errorMsg = {...this.state.errorMsg}\\n\\n    if (username.length < 3) {\\n      usernameValid = false;\\n      errorMsg.username = 'Must be at least 3 characters long'\\n    }\\n\\n    this.setState({usernameValid, errorMsg}, this.validateForm)\\n  }\\n\\n  updateEmail = (email) => {\\n    this.setState({email}, this.validateEmail)\\n  }\\n\\n  validateEmail = () => {\\n    const {email} = this.state;\\n    let emailValid = true;\\n    let errorMsg = {...this.state.errorMsg}\\n\\n    // checks for format _@_._\\n    if (!/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(email)){\\n      emailValid = false;\\n      errorMsg.email = 'Invalid email format'\\n    }\\n\\n    this.setState({emailValid, errorMsg}, this.validateForm)\\n  }\\n\\n  updatePassword = (password) => {\\n    this.setState({password}, this.validatePassword);\\n  }\\n\\n  validatePassword = () => {\\n    const {password} = this.state;\\n    let passwordValid = true;\\n    let errorMsg = {...this.state.errorMsg}\\n\\n    // must be 6 chars\\n    // must contain a number\\n    // must contain a special character\\n\\n    if (password.length < 6) {\\n      passwordValid = false;\\n      errorMsg.password = 'Password must be at least 6 characters long';\\n    } else if (!/\\\\d/.test(password)){\\n      passwordValid = false;\\n      errorMsg.password = 'Password must contain a digit';\\n    } else if (!/[!@#$%^&*]/.test(password)){\\n      passwordValid = false;\\n      errorMsg.password = 'Password must contain special character: !@#$%^&*';\\n    }\\n\\n    this.setState({passwordValid, errorMsg}, this.validateForm);\\n  }\\n\\n  updatePasswordConfirm = (passwordConfirm) => {\\n    this.setState({passwordConfirm}, this.validatePasswordConfirm)\\n  }\\n\\n  validatePasswordConfirm = () => {\\n    const {passwordConfirm, password} = this.state;\\n    let passwordConfirmValid = true;\\n    let errorMsg = {...this.state.errorMsg}\\n\\n    if (password !== passwordConfirm) {\\n      passwordConfirmValid = false;\\n      errorMsg.passwordConfirm = 'Passwords do not match'\\n    }\\n\\n    this.setState({passwordConfirmValid, errorMsg}, this.validateForm);\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header>\\n          Form Page\\n        </header>\\n        <main role='main'>\\n          <form action='#' id='js-form'>\\n            <div className='form-group'>\\n              <label htmlFor='username'>Username</label>\\n              < ValidationMessage valid={this.state.usernameValid} message={this.state.errorMsg.username} />\\n              <input type='text' id='username' name='username' className='form-field'\\n              value={this.state.username} onChange={(e) => this.updateUsername(e.target.value)}/>\\n            </div>\\n            <div className='form-group'>\\n              <label htmlFor='email'>Email</label>\\n              < ValidationMessage valid={this.state.emailValid} message={this.state.errorMsg.email} />\\n              <input type='email' id='email' name='email' className='form-field'\\n              value={this.state.email} onChange={(e) => this.updateEmail(e.target.value)}/>\\n            </div>\\n            <div className='form-group'>\\n              <label htmlFor='password'>Password</label>\\n              < ValidationMessage valid={this.state.passwordValid} message={this.state.errorMsg.password} />\\n              <input type='password' id='password' name='password' className='form-field'\\n              value={this.state.password} onChange={(e) => this.updatePassword(e.target.value)}/>\\n            </div>\\n            <div className='form-group'>\\n              <label htmlFor='password-confirmation'>Password Confirmation</label>\\n              < ValidationMessage valid={this.state.passwordConfirmValid} message={this.state.errorMsg.passwordConfirm} />\\n              <input type='password' id='password-confirmation' name='password-confirmation' className='form-field' value={this.state.passwordConfirm} onChange={(e) => this.updatePasswordConfirm(e.target.value)}/>\\n            </div>\\n            <div className='form-controls'>\\n              <button className='button' type='submit' disabled={!this.state.formValid}>Sign Up</button>\\n            </div>\\n          </form>\\n        </main>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,a,t){},16:function(e,a,t){},17:function(e,a,t){\"use strict\";t.r(a);var s=t(0),r=t.n(s),n=t(3),o=t.n(n),i=(t(15),t(1)),l=t(4),m=t(5),d=t(7),c=t(6),u=t(8);t(16);function p(e){return e.valid?null:r.a.createElement(\"div\",{className:\"error-msg\"},e.message)}var f=function(e){function a(){var e,t;Object(l.a)(this,a);for(var s=arguments.length,r=new Array(s),n=0;n<s;n++)r[n]=arguments[n];return(t=Object(d.a)(this,(e=Object(c.a)(a)).call.apply(e,[this].concat(r)))).state={username:\"\",usernameValid:!1,email:\"\",emailValid:!1,password:\"\",passwordValid:!1,passwordConfirm:\"\",passwordConfirmValid:!1,formValid:!1,errorMsg:{}},t.validateForm=function(){var e=t.state,a=e.usernameValid,s=e.emailValid,r=e.passwordValid,n=e.passwordConfirmValid;t.setState({formValid:a&&s&&r&&n})},t.updateUsername=function(e){t.setState({username:e},t.validateUsername)},t.validateUsername=function(){var e=t.state.username,a=!0,s=Object(i.a)({},t.state.errorMsg);e.length<3&&(a=!1,s.username=\"Must be at least 3 characters long\"),t.setState({usernameValid:a,errorMsg:s},t.validateForm)},t.updateEmail=function(e){t.setState({email:e},t.validateEmail)},t.validateEmail=function(){var e=t.state.email,a=!0,s=Object(i.a)({},t.state.errorMsg);/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e)||(a=!1,s.email=\"Invalid email format\"),t.setState({emailValid:a,errorMsg:s},t.validateForm)},t.updatePassword=function(e){t.setState({password:e},t.validatePassword)},t.validatePassword=function(){var e=t.state.password,a=!0,s=Object(i.a)({},t.state.errorMsg);e.length<6?(a=!1,s.password=\"Password must be at least 6 characters long\"):/\\d/.test(e)?/[!@#$%^&*]/.test(e)||(a=!1,s.password=\"Password must contain special character: !@#$%^&*\"):(a=!1,s.password=\"Password must contain a digit\"),t.setState({passwordValid:a,errorMsg:s},t.validateForm)},t.updatePasswordConfirm=function(e){t.setState({passwordConfirm:e},t.validatePasswordConfirm)},t.validatePasswordConfirm=function(){var e=t.state,a=e.passwordConfirm,s=e.password,r=!0,n=Object(i.a)({},t.state.errorMsg);s!==a&&(r=!1,n.passwordConfirm=\"Passwords do not match\"),t.setState({passwordConfirmValid:r,errorMsg:n},t.validateForm)},t}return Object(u.a)(a,e),Object(m.a)(a,[{key:\"render\",value:function(){var e=this;return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"header\",null,\"Form Page\"),r.a.createElement(\"main\",{role:\"main\"},r.a.createElement(\"form\",{action:\"#\",id:\"js-form\"},r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:\"username\"},\"Username\"),r.a.createElement(p,{valid:this.state.usernameValid,message:this.state.errorMsg.username}),r.a.createElement(\"input\",{type:\"text\",id:\"username\",name:\"username\",className:\"form-field\",value:this.state.username,onChange:function(a){return e.updateUsername(a.target.value)}})),r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:\"email\"},\"Email\"),r.a.createElement(p,{valid:this.state.emailValid,message:this.state.errorMsg.email}),r.a.createElement(\"input\",{type:\"email\",id:\"email\",name:\"email\",className:\"form-field\",value:this.state.email,onChange:function(a){return e.updateEmail(a.target.value)}})),r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:\"password\"},\"Password\"),r.a.createElement(p,{valid:this.state.passwordValid,message:this.state.errorMsg.password}),r.a.createElement(\"input\",{type:\"password\",id:\"password\",name:\"password\",className:\"form-field\",value:this.state.password,onChange:function(a){return e.updatePassword(a.target.value)}})),r.a.createElement(\"div\",{className:\"form-group\"},r.a.createElement(\"label\",{htmlFor:\"password-confirmation\"},\"Password Confirmation\"),r.a.createElement(p,{valid:this.state.passwordConfirmValid,message:this.state.errorMsg.passwordConfirm}),r.a.createElement(\"input\",{type:\"password\",id:\"password-confirmation\",name:\"password-confirmation\",className:\"form-field\",value:this.state.passwordConfirm,onChange:function(a){return e.updatePasswordConfirm(a.target.value)}})),r.a.createElement(\"div\",{className:\"form-controls\"},r.a.createElement(\"button\",{className:\"button\",type:\"submit\",disabled:!this.state.formValid},\"Sign Up\")))))}}]),a}(r.a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},9:function(e,a,t){e.exports=t(17)}},[[9,1,2]]]);","extractedComments":[]}