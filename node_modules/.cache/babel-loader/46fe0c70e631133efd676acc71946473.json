{"ast":null,"code":"import _objectSpread from \"/Users/jorgecano/Documents/github/repository/forms-in-react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jorgecano/Documents/github/repository/forms-in-react/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return React.createElement(\"div\", {\n      className: \"error-msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, props.message);\n  }\n\n  return null;\n}\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      usernameValid: false,\n      email: '',\n      emailValid: false,\n      password: '',\n      passwordValid: false,\n      passwordConfirm: '',\n      passwordConfirmValid: false,\n      formValid: false,\n      errorMsg: {}\n    };\n\n    this.validateForm = () => {\n      const _this$state = this.state,\n            usernameValid = _this$state.usernameValid,\n            emailValid = _this$state.emailValid,\n            passwordValid = _this$state.passwordValid,\n            passwordConfirmValid = _this$state.passwordConfirmValid;\n      this.setState({\n        formValid: usernameValid && emailValid && passwordValid && passwordConfirmValid\n      });\n    };\n\n    this.updateUsername = username => {\n      this.setState({\n        username\n      }, this.validateUsername);\n    };\n\n    this.validateUsername = () => {\n      const username = this.state.username;\n      let usernameValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg);\n\n      if (username.length < 3) {\n        usernameValid = false;\n        errorMsg.username = 'Must be at least 3 characters long';\n      }\n\n      this.setState({\n        usernameValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updateEmail = email => {\n      this.setState({\n        email\n      }, this.validateEmail);\n    };\n\n    this.validateEmail = () => {\n      const email = this.state.email;\n      let emailValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg); // checks for format _@_._\n\n\n      if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n        emailValid = false;\n        errorMsg.email = 'Invalid email format';\n      }\n\n      this.setState({\n        emailValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updatePassword = password => {\n      this.setState({\n        password\n      }, this.validatePassword);\n    };\n\n    this.validatePassword = () => {\n      const password = this.state.password;\n      let passwordValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg); // must be 6 chars\n      // must contain a number\n      // must contain a special character\n\n\n      if (password.length < 6) {\n        passwordValid = false;\n        errorMsg.password = 'Password must be at least 6 characters long';\n      } else if (!/\\d/.test(password)) {\n        passwordValid = false;\n        errorMsg.password = 'Password must contain a digit';\n      } else if (!/[!@#$%^&*]/.test(password)) {\n        passwordValid = false;\n        errorMsg.password = 'Password must contain special character: !@#$%^&*';\n      }\n\n      this.setState({\n        passwordValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updatePasswordConfirm = passwordConfirm => {\n      this.setState({\n        passwordConfirm\n      }, this.validatePasswordConfirm);\n    };\n\n    this.validatePasswordConfirm = () => {\n      const _this$state2 = this.state,\n            passwordConfirm = _this$state2.passwordConfirm,\n            password = _this$state2.password;\n      let passwordConfirmValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg);\n\n      if (password !== passwordConfirm) {\n        passwordConfirmValid = false;\n        errorMsg.passwordConfirm = 'Passwords do not match';\n      }\n\n      this.setState({\n        passwordConfirmValid,\n        errorMsg\n      }, this.validateForm);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Sign Up\"), React.createElement(\"main\", {\n      role: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      action: \"#\",\n      id: \"js-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Username\"), React.createElement(ValidationMessage, {\n      valid: this.state.usernameValid,\n      message: this.state.errorMsg.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"username\",\n      name: \"username\",\n      className: \"form-field\",\n      value: this.state.username,\n      onChange: e => this.updateUsername(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Email\"), React.createElement(ValidationMessage, {\n      valid: this.state.emailValid,\n      message: this.state.errorMsg.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      name: \"email\",\n      className: \"form-field\",\n      value: this.state.email,\n      onChange: e => this.updateEmail(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Password\"), React.createElement(ValidationMessage, {\n      valid: this.state.passwordValid,\n      message: this.state.errorMsg.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      name: \"password\",\n      className: \"form-field\",\n      value: this.state.password,\n      onChange: e => this.updatePassword(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password-confirmation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Password Confirmation\"), React.createElement(ValidationMessage, {\n      valid: this.state.passwordConfirmValid,\n      message: this.state.errorMsg.passwordConfirm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password-confirmation\",\n      name: \"password-confirmation\",\n      className: \"form-field\",\n      value: this.state.passwordConfirm,\n      onChange: e => this.updatePasswordConfirm(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button\",\n      type: \"submit\",\n      disabled: !this.state.formValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Sign Up\")))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jorgecano/Documents/github/repository/forms-in-react/src/App.js"],"names":["React","ValidationMessage","props","valid","message","App","Component","state","username","usernameValid","email","emailValid","password","passwordValid","passwordConfirm","passwordConfirmValid","formValid","errorMsg","validateForm","setState","updateUsername","validateUsername","length","updateEmail","validateEmail","test","updatePassword","validatePassword","updatePasswordConfirm","validatePasswordConfirm","render","e","target","value"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BD,KAAK,CAACE,OAAlC,CADF;AAGD;;AACD,SAAO,IAAP;AACD;;AAED,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,QAAQ,EAAE,EADJ;AACQC,MAAAA,aAAa,EAAE,KADvB;AAENC,MAAAA,KAAK,EAAE,EAFD;AAEKC,MAAAA,UAAU,EAAE,KAFjB;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAGQC,MAAAA,aAAa,EAAE,KAHvB;AAINC,MAAAA,eAAe,EAAE,EAJX;AAIeC,MAAAA,oBAAoB,EAAE,KAJrC;AAKNC,MAAAA,SAAS,EAAE,KALL;AAMNC,MAAAA,QAAQ,EAAE;AANJ,KADwB;;AAAA,SAUhCC,YAVgC,GAUjB,MAAM;AAAA,0BACsD,KAAKX,KAD3D;AAAA,YACZE,aADY,eACZA,aADY;AAAA,YACGE,UADH,eACGA,UADH;AAAA,YACeE,aADf,eACeA,aADf;AAAA,YAC8BE,oBAD9B,eAC8BA,oBAD9B;AAEnB,WAAKI,QAAL,CAAc;AACZH,QAAAA,SAAS,EAAEP,aAAa,IAAIE,UAAjB,IAA+BE,aAA/B,IAAgDE;AAD/C,OAAd;AAGD,KAf+B;;AAAA,SAiBhCK,cAjBgC,GAiBdZ,QAAD,IAAc;AAC7B,WAAKW,QAAL,CAAc;AAACX,QAAAA;AAAD,OAAd,EAA0B,KAAKa,gBAA/B;AACD,KAnB+B;;AAAA,SAqBhCA,gBArBgC,GAqBb,MAAM;AAAA,YAChBb,QADgB,GACJ,KAAKD,KADD,CAChBC,QADgB;AAEvB,UAAIC,aAAa,GAAG,IAApB;;AACA,UAAIQ,QAAQ,qBAAO,KAAKV,KAAL,CAAWU,QAAlB,CAAZ;;AAEA,UAAIT,QAAQ,CAACc,MAAT,GAAkB,CAAtB,EAAyB;AACvBb,QAAAA,aAAa,GAAG,KAAhB;AACAQ,QAAAA,QAAQ,CAACT,QAAT,GAAoB,oCAApB;AACD;;AAED,WAAKW,QAAL,CAAc;AAACV,QAAAA,aAAD;AAAgBQ,QAAAA;AAAhB,OAAd,EAAyC,KAAKC,YAA9C;AACD,KAhC+B;;AAAA,SAkChCK,WAlCgC,GAkCjBb,KAAD,IAAW;AACvB,WAAKS,QAAL,CAAc;AAACT,QAAAA;AAAD,OAAd,EAAuB,KAAKc,aAA5B;AACD,KApC+B;;AAAA,SAsChCA,aAtCgC,GAsChB,MAAM;AAAA,YACbd,KADa,GACJ,KAAKH,KADD,CACbG,KADa;AAEpB,UAAIC,UAAU,GAAG,IAAjB;;AACA,UAAIM,QAAQ,qBAAO,KAAKV,KAAL,CAAWU,QAAlB,CAAZ,CAHoB,CAKpB;;;AACA,UAAI,CAAC,6BAA6BQ,IAA7B,CAAkCf,KAAlC,CAAL,EAA8C;AAC5CC,QAAAA,UAAU,GAAG,KAAb;AACAM,QAAAA,QAAQ,CAACP,KAAT,GAAiB,sBAAjB;AACD;;AAED,WAAKS,QAAL,CAAc;AAACR,QAAAA,UAAD;AAAaM,QAAAA;AAAb,OAAd,EAAsC,KAAKC,YAA3C;AACD,KAlD+B;;AAAA,SAoDhCQ,cApDgC,GAoDdd,QAAD,IAAc;AAC7B,WAAKO,QAAL,CAAc;AAACP,QAAAA;AAAD,OAAd,EAA0B,KAAKe,gBAA/B;AACD,KAtD+B;;AAAA,SAwDhCA,gBAxDgC,GAwDb,MAAM;AAAA,YAChBf,QADgB,GACJ,KAAKL,KADD,CAChBK,QADgB;AAEvB,UAAIC,aAAa,GAAG,IAApB;;AACA,UAAII,QAAQ,qBAAO,KAAKV,KAAL,CAAWU,QAAlB,CAAZ,CAHuB,CAKvB;AACA;AACA;;;AAEA,UAAIL,QAAQ,CAACU,MAAT,GAAkB,CAAtB,EAAyB;AACvBT,QAAAA,aAAa,GAAG,KAAhB;AACAI,QAAAA,QAAQ,CAACL,QAAT,GAAoB,6CAApB;AACD,OAHD,MAGO,IAAI,CAAC,KAAKa,IAAL,CAAUb,QAAV,CAAL,EAAyB;AAC9BC,QAAAA,aAAa,GAAG,KAAhB;AACAI,QAAAA,QAAQ,CAACL,QAAT,GAAoB,+BAApB;AACD,OAHM,MAGA,IAAI,CAAC,aAAaa,IAAb,CAAkBb,QAAlB,CAAL,EAAiC;AACtCC,QAAAA,aAAa,GAAG,KAAhB;AACAI,QAAAA,QAAQ,CAACL,QAAT,GAAoB,mDAApB;AACD;;AAED,WAAKO,QAAL,CAAc;AAACN,QAAAA,aAAD;AAAgBI,QAAAA;AAAhB,OAAd,EAAyC,KAAKC,YAA9C;AACD,KA7E+B;;AAAA,SA+EhCU,qBA/EgC,GA+EPd,eAAD,IAAqB;AAC3C,WAAKK,QAAL,CAAc;AAACL,QAAAA;AAAD,OAAd,EAAiC,KAAKe,uBAAtC;AACD,KAjF+B;;AAAA,SAmFhCA,uBAnFgC,GAmFN,MAAM;AAAA,2BACM,KAAKtB,KADX;AAAA,YACvBO,eADuB,gBACvBA,eADuB;AAAA,YACNF,QADM,gBACNA,QADM;AAE9B,UAAIG,oBAAoB,GAAG,IAA3B;;AACA,UAAIE,QAAQ,qBAAO,KAAKV,KAAL,CAAWU,QAAlB,CAAZ;;AAEA,UAAIL,QAAQ,KAAKE,eAAjB,EAAkC;AAChCC,QAAAA,oBAAoB,GAAG,KAAvB;AACAE,QAAAA,QAAQ,CAACH,eAAT,GAA2B,wBAA3B;AACD;;AAED,WAAKK,QAAL,CAAc;AAACJ,QAAAA,oBAAD;AAAuBE,QAAAA;AAAvB,OAAd,EAAgD,KAAKC,YAArD;AACD,KA9F+B;AAAA;;AAgGhCY,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAIE;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,MAAM,EAAC,GAAb;AAAiB,MAAA,EAAE,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAE,iBAAF;AAAoB,MAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWE,aAAtC;AAAqD,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWU,QAAX,CAAoBT,QAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,UAAtB;AAAiC,MAAA,IAAI,EAAC,UAAtC;AAAiD,MAAA,SAAS,EAAC,YAA3D;AACA,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,QADlB;AAC4B,MAAA,QAAQ,EAAGuB,CAAD,IAAO,KAAKX,cAAL,CAAoBW,CAAC,CAACC,MAAF,CAASC,KAA7B,CAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF,EAOE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,oBAAE,iBAAF;AAAoB,MAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWI,UAAtC;AAAkD,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWU,QAAX,CAAoBP,KAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,EAAE,EAAC,OAAvB;AAA+B,MAAA,IAAI,EAAC,OAApC;AAA4C,MAAA,SAAS,EAAC,YAAtD;AACA,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,KADlB;AACyB,MAAA,QAAQ,EAAGqB,CAAD,IAAO,KAAKR,WAAL,CAAiBQ,CAAC,CAACC,MAAF,CAASC,KAA1B,CAD1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAPF,EAaE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,oBAAE,iBAAF;AAAoB,MAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWM,aAAtC;AAAqD,MAAA,OAAO,EAAE,KAAKN,KAAL,CAAWU,QAAX,CAAoBL,QAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,EAAC,UAA1B;AAAqC,MAAA,IAAI,EAAC,UAA1C;AAAqD,MAAA,SAAS,EAAC,YAA/D;AACA,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,QADlB;AAC4B,MAAA,QAAQ,EAAGmB,CAAD,IAAO,KAAKL,cAAL,CAAoBK,CAAC,CAACC,MAAF,CAASC,KAA7B,CAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAbF,EAmBE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE,oBAAE,iBAAF;AAAoB,MAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWQ,oBAAtC;AAA4D,MAAA,OAAO,EAAE,KAAKR,KAAL,CAAWU,QAAX,CAAoBH,eAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,EAAC,uBAA1B;AAAkD,MAAA,IAAI,EAAC,uBAAvD;AAA+E,MAAA,SAAS,EAAC,YAAzF;AAAsG,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWO,eAAxH;AAAyI,MAAA,QAAQ,EAAGiB,CAAD,IAAO,KAAKH,qBAAL,CAA2BG,CAAC,CAACC,MAAF,CAASC,KAApC,CAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAnBF,EAwBE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,IAAI,EAAC,QAAhC;AAAyC,MAAA,QAAQ,EAAE,CAAC,KAAK1B,KAAL,CAAWS,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAxBF,CADF,CAJF,CADF;AAqCD;;AAtI+B;;AAyIlC,eAAeX,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return(\n      <div className='error-msg'>{props.message}</div>\n    )\n  }\n  return null;\n}\n\nclass App extends React.Component {\n  state = {\n    username: '', usernameValid: false,\n    email: '', emailValid: false,\n    password: '', passwordValid: false,\n    passwordConfirm: '', passwordConfirmValid: false,\n    formValid: false,\n    errorMsg: {}\n  }\n\n  validateForm = () => {\n    const {usernameValid, emailValid, passwordValid, passwordConfirmValid} = this.state;\n    this.setState({\n      formValid: usernameValid && emailValid && passwordValid && passwordConfirmValid\n    })\n  }\n\n  updateUsername = (username) => {\n    this.setState({username}, this.validateUsername)\n  }\n\n  validateUsername = () => {\n    const {username} = this.state;\n    let usernameValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (username.length < 3) {\n      usernameValid = false;\n      errorMsg.username = 'Must be at least 3 characters long'\n    }\n\n    this.setState({usernameValid, errorMsg}, this.validateForm)\n  }\n\n  updateEmail = (email) => {\n    this.setState({email}, this.validateEmail)\n  }\n\n  validateEmail = () => {\n    const {email} = this.state;\n    let emailValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    // checks for format _@_._\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\n      emailValid = false;\n      errorMsg.email = 'Invalid email format'\n    }\n\n    this.setState({emailValid, errorMsg}, this.validateForm)\n  }\n\n  updatePassword = (password) => {\n    this.setState({password}, this.validatePassword);\n  }\n\n  validatePassword = () => {\n    const {password} = this.state;\n    let passwordValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    // must be 6 chars\n    // must contain a number\n    // must contain a special character\n\n    if (password.length < 6) {\n      passwordValid = false;\n      errorMsg.password = 'Password must be at least 6 characters long';\n    } else if (!/\\d/.test(password)){\n      passwordValid = false;\n      errorMsg.password = 'Password must contain a digit';\n    } else if (!/[!@#$%^&*]/.test(password)){\n      passwordValid = false;\n      errorMsg.password = 'Password must contain special character: !@#$%^&*';\n    }\n\n    this.setState({passwordValid, errorMsg}, this.validateForm);\n  }\n\n  updatePasswordConfirm = (passwordConfirm) => {\n    this.setState({passwordConfirm}, this.validatePasswordConfirm)\n  }\n\n  validatePasswordConfirm = () => {\n    const {passwordConfirm, password} = this.state;\n    let passwordConfirmValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (password !== passwordConfirm) {\n      passwordConfirmValid = false;\n      errorMsg.passwordConfirm = 'Passwords do not match'\n    }\n\n    this.setState({passwordConfirmValid, errorMsg}, this.validateForm);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          Sign Up\n        </header>\n        <main role='main'>\n          <form action='#' id='js-form'>\n            <div className='form-group'>\n              <label htmlFor='username'>Username</label>\n              < ValidationMessage valid={this.state.usernameValid} message={this.state.errorMsg.username} />\n              <input type='text' id='username' name='username' className='form-field'\n              value={this.state.username} onChange={(e) => this.updateUsername(e.target.value)}/>\n            </div>\n            <div className='form-group'>\n              <label htmlFor='email'>Email</label>\n              < ValidationMessage valid={this.state.emailValid} message={this.state.errorMsg.email} />\n              <input type='email' id='email' name='email' className='form-field'\n              value={this.state.email} onChange={(e) => this.updateEmail(e.target.value)}/>\n            </div>\n            <div className='form-group'>\n              <label htmlFor='password'>Password</label>\n              < ValidationMessage valid={this.state.passwordValid} message={this.state.errorMsg.password} />\n              <input type='password' id='password' name='password' className='form-field'\n              value={this.state.password} onChange={(e) => this.updatePassword(e.target.value)}/>\n            </div>\n            <div className='form-group'>\n              <label htmlFor='password-confirmation'>Password Confirmation</label>\n              < ValidationMessage valid={this.state.passwordConfirmValid} message={this.state.errorMsg.passwordConfirm} />\n              <input type='password' id='password-confirmation' name='password-confirmation' className='form-field' value={this.state.passwordConfirm} onChange={(e) => this.updatePasswordConfirm(e.target.value)}/>\n            </div>\n            <div className='form-controls'>\n              <button className='button' type='submit' disabled={!this.state.formValid}>Sign Up</button>\n            </div>\n          </form>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}